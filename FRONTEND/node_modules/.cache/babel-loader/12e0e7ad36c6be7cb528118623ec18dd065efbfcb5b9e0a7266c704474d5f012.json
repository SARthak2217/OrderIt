{"ast":null,"code":"var _jsxFileName = \"/Users/sarthak/Desktop/OrderIt/FRONTEND/src/context/ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Check for saved theme preference or system preference\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('orderit-theme');\n    if (savedTheme) {\n      const isDark = savedTheme === 'dark';\n      setDarkMode(isDark);\n      updateTheme(isDark);\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setDarkMode(prefersDark);\n      updateTheme(prefersDark);\n    }\n  }, []);\n  const updateTheme = isDark => {\n    if (isDark) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n  const toggleDarkMode = () => {\n    const newDarkMode = !darkMode;\n    setDarkMode(newDarkMode);\n    updateTheme(newDarkMode);\n    localStorage.setItem('orderit-theme', newDarkMode ? 'dark' : 'light');\n  };\n  const value = {\n    darkMode,\n    toggleDarkMode,\n    setDarkMode: isDark => {\n      setDarkMode(isDark);\n      updateTheme(isDark);\n      localStorage.setItem('orderit-theme', isDark ? 'dark' : 'light');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"n2P3coCVngntCnyS/Nqj+dgR7+U=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","Error","ThemeProvider","children","_s2","darkMode","setDarkMode","savedTheme","localStorage","getItem","isDark","updateTheme","prefersDark","window","matchMedia","matches","document","documentElement","classList","add","remove","toggleDarkMode","newDarkMode","setItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sarthak/Desktop/OrderIt/FRONTEND/src/context/ThemeContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport const ThemeProvider = ({ children }) => {\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Check for saved theme preference or system preference\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('orderit-theme');\n    if (savedTheme) {\n      const isDark = savedTheme === 'dark';\n      setDarkMode(isDark);\n      updateTheme(isDark);\n    } else {\n      // Check system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setDarkMode(prefersDark);\n      updateTheme(prefersDark);\n    }\n  }, []);\n\n  const updateTheme = (isDark) => {\n    if (isDark) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n\n  const toggleDarkMode = () => {\n    const newDarkMode = !darkMode;\n    setDarkMode(newDarkMode);\n    updateTheme(newDarkMode);\n    localStorage.setItem('orderit-theme', newDarkMode ? 'dark' : 'light');\n  };\n\n  const value = {\n    darkMode,\n    toggleDarkMode,\n    setDarkMode: (isDark) => {\n      setDarkMode(isDark);\n      updateTheme(isDark);\n      localStorage.setItem('orderit-theme', isDark ? 'dark' : 'light');\n    }\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGR,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACxD,IAAIF,UAAU,EAAE;MACd,MAAMG,MAAM,GAAGH,UAAU,KAAK,MAAM;MACpCD,WAAW,CAACI,MAAM,CAAC;MACnBC,WAAW,CAACD,MAAM,CAAC;IACrB,CAAC,MAAM;MACL;MACA,MAAME,WAAW,GAAGC,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;MAC7ET,WAAW,CAACM,WAAW,CAAC;MACxBD,WAAW,CAACC,WAAW,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,WAAW,GAAID,MAAM,IAAK;IAC9B,IAAIA,MAAM,EAAE;MACVM,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,WAAW,GAAG,CAACjB,QAAQ;IAC7BC,WAAW,CAACgB,WAAW,CAAC;IACxBX,WAAW,CAACW,WAAW,CAAC;IACxBd,YAAY,CAACe,OAAO,CAAC,eAAe,EAAED,WAAW,GAAG,MAAM,GAAG,OAAO,CAAC;EACvE,CAAC;EAED,MAAME,KAAK,GAAG;IACZnB,QAAQ;IACRgB,cAAc;IACdf,WAAW,EAAGI,MAAM,IAAK;MACvBJ,WAAW,CAACI,MAAM,CAAC;MACnBC,WAAW,CAACD,MAAM,CAAC;MACnBF,YAAY,CAACe,OAAO,CAAC,eAAe,EAAEb,MAAM,GAAG,MAAM,GAAG,OAAO,CAAC;IAClE;EACF,CAAC;EAED,oBACEd,OAAA,CAACC,YAAY,CAAC4B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAArB,QAAA,EACjCA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACzB,GAAA,CAhDWF,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}